// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/influxdata/influxdb/v2/notebooks/service (interfaces: NotebookService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	platform "github.com/influxdata/influxdb/v2/kit/platform"
	service "github.com/influxdata/influxdb/v2/notebooks/service"
)

// MockNotebookService is a mock of NotebookService interface.
type MockNotebookService struct {
	ctrl     *gomock.Controller
	recorder *MockNotebookServiceMockRecorder
}

// MockNotebookServiceMockRecorder is the mock recorder for MockNotebookService.
type MockNotebookServiceMockRecorder struct {
	mock *MockNotebookService
}

// NewMockNotebookService creates a new mock instance.
func NewMockNotebookService(ctrl *gomock.Controller) *MockNotebookService {
	mock := &MockNotebookService{ctrl: ctrl}
	mock.recorder = &MockNotebookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotebookService) EXPECT() *MockNotebookServiceMockRecorder {
	return m.recorder
}

// CreateNotebook mocks base method.
func (m *MockNotebookService) CreateNotebook(arg0 context.Context, arg1 *service.NotebookReqBody) (*service.Notebook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotebook", arg0, arg1)
	ret0, _ := ret[0].(*service.Notebook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotebook indicates an expected call of CreateNotebook.
func (mr *MockNotebookServiceMockRecorder) CreateNotebook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotebook", reflect.TypeOf((*MockNotebookService)(nil).CreateNotebook), arg0, arg1)
}

// DeleteNotebook mocks base method.
func (m *MockNotebookService) DeleteNotebook(arg0 context.Context, arg1 platform.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotebook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotebook indicates an expected call of DeleteNotebook.
func (mr *MockNotebookServiceMockRecorder) DeleteNotebook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotebook", reflect.TypeOf((*MockNotebookService)(nil).DeleteNotebook), arg0, arg1)
}

// GetNotebook mocks base method.
func (m *MockNotebookService) GetNotebook(arg0 context.Context, arg1 platform.ID) (*service.Notebook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotebook", arg0, arg1)
	ret0, _ := ret[0].(*service.Notebook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotebook indicates an expected call of GetNotebook.
func (mr *MockNotebookServiceMockRecorder) GetNotebook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotebook", reflect.TypeOf((*MockNotebookService)(nil).GetNotebook), arg0, arg1)
}

// ListNotebooks mocks base method.
func (m *MockNotebookService) ListNotebooks(arg0 context.Context, arg1 service.NotebookListFilter) ([]*service.Notebook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotebooks", arg0, arg1)
	ret0, _ := ret[0].([]*service.Notebook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotebooks indicates an expected call of ListNotebooks.
func (mr *MockNotebookServiceMockRecorder) ListNotebooks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotebooks", reflect.TypeOf((*MockNotebookService)(nil).ListNotebooks), arg0, arg1)
}

// UpdateNotebook mocks base method.
func (m *MockNotebookService) UpdateNotebook(arg0 context.Context, arg1 platform.ID, arg2 *service.NotebookReqBody) (*service.Notebook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotebook", arg0, arg1, arg2)
	ret0, _ := ret[0].(*service.Notebook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNotebook indicates an expected call of UpdateNotebook.
func (mr *MockNotebookServiceMockRecorder) UpdateNotebook(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotebook", reflect.TypeOf((*MockNotebookService)(nil).UpdateNotebook), arg0, arg1, arg2)
}
